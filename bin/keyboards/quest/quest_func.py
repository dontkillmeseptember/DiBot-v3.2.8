from misc.util import ReplyKeyboardMarkup, KeyboardButton, types, datetime, InlineKeyboardMarkup, InlineKeyboardButton
from misc.loader import bot, dp

from data import yml_loader
from data.start_db import check_user_data, load_user_data, is_user_in_data

from data.config import PHOTO_PATH, PHOTO_REWARD

from keyboards.quest.witcherone_func import start_the_witcher_one
from keyboards.quest.witchertwo_func import start_the_witcher_two
# from keyboards.quest.witcherthree_func import start_the_witcher_three

def create_quest_keyboard(message):
	# –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å"
	user = message.from_user
	user_id = user.id
	user_data = check_user_data(user_id)
	battlepass = user_data.get("battlepass", "Uxknow")
	quest = user_data.get("quest", "–ù–∞—á–∞—Ç—å")

	# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∫–ª–∞–¥–∫–∞–º–∏
	keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
	keyboard.row(
		KeyboardButton(yml_loader.quest_data["quest_buttons"]["awards"]),
		KeyboardButton(yml_loader.quest_data["quest_buttons"]["info"])
	)
	keyboard.add(KeyboardButton(f"üó∫Ô∏è –í –ø—É—Ç—å ‚Ä¢ {quest}"))
	keyboard.row(
		KeyboardButton(yml_loader.main_path["main_menu"]["button_main_menu"]),
		KeyboardButton(f"üìà –í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å ‚Äî {battlepass}")
	)

	return keyboard

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–∫–ª–∞–¥–∫–∏ "–ó–∞–¥–∞–Ω–∏—è"
async def quest_handler(message: types.Message):
	# –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –∫–Ω–æ–ø–æ–∫
	keyboard = create_quest_keyboard(message)

	await bot.send_photo(message.chat.id, photo=PHOTO_PATH, caption=yml_loader.quest_data["quest"]["battlepass_info"], reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–∫–ª–∞–¥–∫–∏ "–í –ø—É—Ç—å!"
async def start_battlepass(message: types.Message):
	user_id = message.from_user.id
	user_data = load_user_data()

	if is_user_in_data(user_id, user_data):
		# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω–∞—è —á–∞—Å—Ç—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		if str(user_id) in user_data and "active_chapter" in user_data[str(user_id)]:
			selected_chapters = user_data[str(user_id)]["active_chapter"]

			if selected_chapters is None:
				await start_the_witcher_one(message)
			elif selected_chapters == "the_witcher_two":
				await start_the_witcher_two(message)
			elif selected_chapters == "the_witcher_three":
				await start_the_witcher_three(message)
	else:
		print("User not registor.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–∫–ª–∞–¥–∫–∏ "–ù–∞–≥—Ä–∞–¥—ã –±–æ–µ–≤–æ–≥–æ –ø—Ä–æ–ø—É—Å–∫–∞"
async def info_rewards(message: types.Message):
	user_id = message.from_user.id
	user_data = load_user_data()

	if is_user_in_data(user_id, user_data):
		# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω–∞—è —á–∞—Å—Ç—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		if str(user_id) in user_data and "active_chapter" in user_data[str(user_id)]:
			selected_chapters = user_data[str(user_id)]["active_chapter"]

			if selected_chapters is None:
				await rewards_selected_one(message)
			elif selected_chapters == "the_witcher_two":
				await rewards_selected_two(message)
			elif selected_chapters == "the_witcher_three":
				await rewards_selected_three(message)
	else:
		print("User not registor.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –Ω–∞–≥—Ä–∞–¥ –¥–ª—è —á–∞—Å—Ç–µ–π
async def rewards_selected_one(message: types.Message):
	inline_keyboard = InlineKeyboardMarkup()
	inline_keyboard.add(InlineKeyboardButton(yml_loader.quest_data["quest_buttons"]["rewards_one"], callback_data="rewards_one"))

	await bot.send_photo(message.chat.id, photo=PHOTO_REWARD, caption=yml_loader.quest_data["quest"]["reward_info"], reply_markup=inline_keyboard)

async def rewards_selected_two(message: types.Message):
	inline_keyboard = InlineKeyboardMarkup()
	inline_keyboard.row(
		InlineKeyboardButton(yml_loader.quest_data["quest_buttons"]["rewards_one"], callback_data="rewards_one_two"),
		InlineKeyboardButton(yml_loader.quest_data["quest_buttons"]["rewards_two"], callback_data="rewards_two")
	)

	await bot.send_photo(message.chat.id, photo=PHOTO_REWARD, caption=yml_loader.quest_data["quest"]["reward_info"], reply_markup=inline_keyboard)

async def rewards_selected_three(message: types.Message):
	inline_keyboard = InlineKeyboardMarkup()
	inline_keyboard.row(
		InlineKeyboardButton(yml_loader.quest_data["quest_buttons"]["rewards_one"], callback_data="rewards_one_three"),
		InlineKeyboardButton(yml_loader.quest_data["quest_buttons"]["rewards_two"], callback_data="rewards_two")
	)

	inline_keyboard.add(InlineKeyboardButton(yml_loader.quest_data["quest_buttons"]["rewards_three"], callback_data="rewards_three"))

	await bot.send_photo(message.chat.id, photo=PHOTO_REWARD, caption=yml_loader.quest_data["quest"]["reward_info"], reply_markup=inline_keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–≥—Ä–∞–¥ –¥–ª—è –ø–µ—Ä–≤–æ–π —á–∞—Å—Ç–∏
@dp.callback_query_handler(lambda c: c.data == 'rewards_one')
async def rewards_one_one(callback_query: types.CallbackQuery):
	await bot.edit_message_caption(caption=yml_loader.quest_data["quest"]["reward_info_one"], chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id)

@dp.callback_query_handler(lambda c: c.data == 'rewards_one_two')
async def rewards_one_two(callback_query: types.CallbackQuery):
	inline_keyboard = InlineKeyboardMarkup()
	inline_keyboard.add(InlineKeyboardButton(yml_loader.quest_data["quest_buttons"]["rewards_two"], callback_data="rewards_two"))

	await bot.edit_message_caption(caption=yml_loader.quest_data["quest"]["reward_info_one"], chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id, reply_markup=inline_keyboard)

@dp.callback_query_handler(lambda c: c.data == 'rewards_one_three')
async def rewards_one_three(callback_query: types.CallbackQuery):
	inline_keyboard = InlineKeyboardMarkup()
	inline_keyboard.row(
		InlineKeyboardButton(yml_loader.quest_data["quest_buttons"]["rewards_two"], callback_data="rewards_two_two"),
		InlineKeyboardButton(yml_loader.quest_data["quest_buttons"]["rewards_three"], callback_data="rewards_three")
	)

	await bot.edit_message_caption(caption=yml_loader.quest_data["quest"]["reward_info_one"], chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id, reply_markup=inline_keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–≥—Ä–∞–¥ –¥–ª—è –≤—Ç–æ—Ä–æ–π —á–∞—Å—Ç–∏
@dp.callback_query_handler(lambda c: c.data == 'rewards_two')
async def rewards_two_one(callback_query: types.CallbackQuery):
	inline_keyboard = InlineKeyboardMarkup()
	inline_keyboard.add(InlineKeyboardButton(yml_loader.quest_data["quest_buttons"]["rewards_one"], callback_data="rewards_one_two"))

	await bot.edit_message_caption(caption=yml_loader.quest_data["quest"]["reward_info_two"], chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id, reply_markup=inline_keyboard)

@dp.callback_query_handler(lambda c: c.data == 'rewards_two_two')
async def rewards_two_two(callback_query: types.CallbackQuery):
	inline_keyboard = InlineKeyboardMarkup()
	inline_keyboard.row(
		InlineKeyboardButton(yml_loader.quest_data["quest_buttons"]["rewards_one"], callback_data="rewards_one_three"),
		InlineKeyboardButton(yml_loader.quest_data["quest_buttons"]["rewards_three"], callback_data="rewards_three")
	)

	await bot.edit_message_caption(caption=yml_loader.quest_data["quest"]["reward_info_two"], chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id, reply_markup=inline_keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–≥—Ä–∞–¥ –¥–ª—è —Ç—Ä–µ—Ç–µ–π —á–∞—Å—Ç–∏
@dp.callback_query_handler(lambda c: c.data == 'rewards_three')
async def rewards_three(callback_query: types.CallbackQuery):
	inline_keyboard = InlineKeyboardMarkup()
	inline_keyboard.row(
		InlineKeyboardButton(yml_loader.quest_data["quest_buttons"]["rewards_one"], callback_data="rewards_one_three"),
		InlineKeyboardButton(yml_loader.quest_data["quest_buttons"]["rewards_two"], callback_data="rewards_two_two")
	)

	await bot.edit_message_caption(caption=yml_loader.quest_data["quest"]["reward_info_three"], chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id, reply_markup=inline_keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–∫–ª–∞–¥–∫–∏ "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ–µ–≤–æ–º –ø—Ä–æ–ø—É—Å–∫–µ"
async def info_handler(message: types.Message):
	user_id = message.from_user.id
	user_data = load_user_data()

	if is_user_in_data(user_id, user_data):
		# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω–∞—è —á–∞—Å—Ç—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		if str(user_id) in user_data and "active_chapter" in user_data[str(user_id)]:
			selected_chapters = user_data[str(user_id)]["active_chapter"]

			if selected_chapters is None:
				await bot.send_photo(message.chat.id, photo=PHOTO_PATH, caption=yml_loader.quest_data["quest"]["quest_info_one"])
			elif selected_chapters == "the_witcher_two":
				await bot.send_photo(message.chat.id, photo=PHOTO_PATH, caption=yml_loader.quest_data["quest"]["quest_info_two"])
			elif selected_chapters == "the_witcher_three":
				await bot.send_photo(message.chat.id, photo=PHOTO_PATH, caption=yml_loader.quest_data["quest"]["quest_info_three"])
	else:
		print("User not registor.")
