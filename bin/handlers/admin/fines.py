from misc.util import types
from misc.loader import dp, bot

from data.start_db import load_user_data, save_user_data
from data.admin_db import is_admin_in_data, load_admin_data
from data.eth_db import load_eth_data, save_eth_data, get_eth_wallet, get_eth_to_rub_rate

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /up_fines
@dp.message_handler(commands=['up_fines'])
async def add_fines_command(message: types.Message):
	# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
	user_id = message.from_user.id
	admin_data = load_admin_data()

	if is_admin_in_data(user_id, admin_data):
		# –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã –Ω–∞ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
		args = message.get_args().split()
		
		if len(args) != 2:
			await message.answer("<b>üë©üèª‚Äçü¶∞üí¨ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É <code>/up_fines</code> [user_id] [—Å—É–º–º–∞]</b>")
			return
		else:
			user_id = args[0]
			amount = args[1]
			
			# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –¥–∞–Ω–Ω—ã—Ö
			user_data = load_user_data()
			if user_id not in user_data:
				await message.answer(f"üë©üèª‚Äçü¶∞üí¨ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Ä¢ <code>{user_id}</code> –Ω–µ –Ω–∞–π–¥–µ–Ω.</b>")
				return
			else:	
				# –û–±–Ω–æ–≤–ª—è–µ–º —Å—É–º–º—É —à—Ç—Ä–∞—Ñ–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
				user_data[user_id]["fines"] = int(amount)
				save_user_data(user_data)
				
				# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π fines —Å –ø—Ä–æ–±–µ–ª–∞–º–∏ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è —Ç—ã—Å—è—á
				message_amount = int(amount)

				formatted_amount = "{:,}".format(message_amount).replace(',', ' ')

				# –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
				user = user_data[user_id]
				user_name = user.get("userlastname", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")

				# –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —à—Ç—Ä–∞—Ñ–µ
				await bot.send_message(user_id, f"üë©üèª‚Äçü¶∞üí¨ <b>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user_name}! –°—É–º–º–∞ –≤–∞—à–∏—Ö —à—Ç—Ä–∞—Ñ–æ–≤ –±—ã–ª–∞ —É–≤–µ–ª–∏—á–µ–Ω–∞.</b>\n\n" \
												"<b>‚Ä¢ –ö—Ä–∞—Ç–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —à—Ç—Ä–∞—Ñ–∞—Ö:</b>\n" \
												f"<b>‚Ü≥ </b><b>–°—É–º–º–∞ —à—Ç—Ä–∞—Ñ–æ–≤ —É–≤–µ–ª–∏—á–µ–Ω–∞ –Ω–∞ ‚Ä¢ üí∑ {formatted_amount} </b>‚ÇΩ\n" \
												f"<b>‚Ü≥ </b><b>–¢–µ–∫—É—â–∞—è —Å—É–º–º–∞ —à—Ç—Ä–∞—Ñ–æ–≤ ‚Ä¢ üí∑ {formatted_amount} </b>‚ÇΩ")

				await message.answer(f"üë©üèª‚Äçü¶∞üí¨ <b>–°—É–º–º–∞ —à—Ç—Ä–∞—Ñ–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_name} –æ–±–Ω–æ–≤–ª–µ–Ω–∞.</b>\n\n"
									"<b>‚Ä¢ –ö—Ä–∞—Ç–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —à—Ç—Ä–∞—Ñ–∞—Ö:</b>\n" \
									f"<b>‚Ü≥ </b><b>–°—É–º–º–∞ —à—Ç—Ä–∞—Ñ–æ–≤ —É–≤–µ–ª–∏—á–µ–Ω–∞ –Ω–∞ ‚Ä¢ üí∑ {formatted_amount} </b>‚ÇΩ\n" \
									f"<b>‚Ü≥ </b><b>–¢–µ–∫—É—â–∞—è —Å—É–º–º–∞ —à—Ç—Ä–∞—Ñ–æ–≤ ‚Ä¢ üí∑ {formatted_amount} </b>‚ÇΩ")
	else:
		await message.answer("üë©üèª‚Äçü¶∞üí¨ <b>–£ –≤–∞—Å –Ω–µ—Ç—É –ø—Ä–∞–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.</b>")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /add_fines
@dp.message_handler(commands=['add_fines'])
async def add_fines(message: types.Message):
	# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
	user_id = message.from_user.id
	admin_data = load_admin_data()

	if is_admin_in_data(user_id, admin_data):
		# –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã –Ω–∞ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
		args = message.get_args().split()
		
		if len(args) < 2:
			await message.answer("<b>üë©üèª‚Äçü¶∞üí¨ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É <code>/add_fines</code> [user_id] [—Å—É–º–º–∞] [—Å–æ–æ–±—â–µ–Ω–∏–µ]</b>")
			return
		else:
			user_id = args[0]
			amount = args[1]
			
			# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –¥–∞–Ω–Ω—ã—Ö
			user_data = load_user_data()
			if user_id not in user_data:
				await message.answer(f"üë©üèª‚Äçü¶∞üí¨ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Ä¢ <code>{user_id}</code> –Ω–µ –Ω–∞–π–¥–µ–Ω.</b>")
				return
			else:
				# –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
				message_text = " ".join(args[2:])

				# –ü—Ä–∏–±–∞–≤–ª—è–µ–º —Å—É–º–º—É –∫ —Ç–µ–∫—É—â–µ–º—É –∑–Ω–∞—á–µ–Ω–∏—é —à—Ç—Ä–∞—Ñ–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
				current_fines = int(user_data[user_id].get("fines", 0))
				updated_fines = current_fines + int(amount)
				user_data[user_id]["fines"] = updated_fines
				save_user_data(user_data)

				# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π fines —Å –ø—Ä–æ–±–µ–ª–∞–º–∏ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è —Ç—ã—Å—è—á
				message_amount = int(amount)
				message_updated_fines = int(updated_fines)

				formatted_amount = "{:,}".format(message_amount).replace(',', ' ')
				formatted_updated_fines = "{:,}".format(message_updated_fines).replace(',', ' ')

				# –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
				user = user_data[user_id]
				user_name = user.get("userlastname", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")

				# –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —à—Ç—Ä–∞—Ñ–µ
				await bot.send_message(user_id, f"üë©üèª‚Äçü¶∞üí¨ <b>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user_name}! –°—É–º–º–∞ –≤–∞—à–∏—Ö —à—Ç—Ä–∞—Ñ–æ–≤ –±—ã–ª–∞ —É–≤–µ–ª–∏—á–µ–Ω–∞.</b>\n\n" \
												"<b>‚Ä¢ –ö—Ä–∞—Ç–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —à—Ç—Ä–∞—Ñ–∞—Ö:</b>\n" \
												f"<b>‚Ü≥ </b><b>–°—É–º–º–∞ —à—Ç—Ä–∞—Ñ–æ–≤ —É–≤–µ–ª–∏—á–µ–Ω–∞ –Ω–∞ ‚Ä¢ üí∑ {formatted_amount} </b>‚ÇΩ\n" \
												f"<b>‚Ü≥ </b><b>–¢–µ–∫—É—â–∞—è —Å—É–º–º–∞ —à—Ç—Ä–∞—Ñ–æ–≤ ‚Ä¢ üí∑ {formatted_updated_fines} </b>‚ÇΩ\n\n" \
												f"üí¨ <b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏: {message_text}.</b>")
				
				await message.answer(f"üë©üèª‚Äçü¶∞üí¨ <b>–°—É–º–º–∞ —à—Ç—Ä–∞—Ñ–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_name} –æ–±–Ω–æ–≤–ª–µ–Ω–∞.</b>\n\n"
									"<b>‚Ä¢ –ö—Ä–∞—Ç–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —à—Ç—Ä–∞—Ñ–∞—Ö:</b>\n" \
									f"<b>‚Ü≥ </b><b>–°—É–º–º–∞ —à—Ç—Ä–∞—Ñ–æ–≤ —É–≤–µ–ª–∏—á–µ–Ω–∞ –Ω–∞ ‚Ä¢ üí∑ {formatted_amount} </b>‚ÇΩ\n" \
									f"<b>‚Ü≥ </b><b>–¢–µ–∫—É—â–∞—è —Å—É–º–º–∞ —à—Ç—Ä–∞—Ñ–æ–≤ ‚Ä¢ üí∑ {formatted_updated_fines} </b>‚ÇΩ\n\n" \
									f"üí¨ <b>–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message_text}.</b>")
	else:
		await message.answer("üë©üèª‚Äçü¶∞üí¨ <b>–£ –≤–∞—Å –Ω–µ—Ç—É –ø—Ä–∞–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.</b>")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /aw_fines
@dp.message_handler(commands=['aw_fines'])
async def aw_fines(message: types.Message):
	# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
	user_id = message.from_user.id
	admin_data = load_admin_data()

	if is_admin_in_data(user_id, admin_data):
		# –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã –Ω–∞ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
		args = message.get_args().split()
		
		if len(args) < 2:
			await message.answer("<b>üë©üèª‚Äçü¶∞üí¨ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É <code>/aw_fines</code> [user_id] [—Å—É–º–º–∞] [—Å–æ–æ–±—â–µ–Ω–∏–µ]</b>")
			return
		else:
			user_id = args[0]
			amount = args[1]
			
			# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –¥–∞–Ω–Ω—ã—Ö
			user_data = load_user_data()
			eth_data = load_eth_data()

			if user_id not in user_data:
				await message.answer(f"üë©üèª‚Äçü¶∞üí¨ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Ä¢ <code>{user_id}</code> –Ω–µ –Ω–∞–π–¥–µ–Ω.</b>")
				return
			else:
				# –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—É–º–º—É —à—Ç—Ä–∞—Ñ–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
				current_fines = int(user_data[user_id].get("fines", 0))

				# –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
				user = user_data[user_id]
				user_name = user.get("userlastname", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")

				# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–Ω–∏–º–∞–µ–º–∞—è —Å—É–º–º–∞ –Ω–µ –±–æ–ª—å—à–µ —Ç–µ–∫—É—â–µ–π —Å—É–º–º—ã —à—Ç—Ä–∞—Ñ–æ–≤
				if int(amount) > current_fines:
					await message.answer(f"üë©üèª‚Äçü¶∞üí¨ <b>–°—É–º–º–∞ –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è –±–æ–ª—å—à–µ —Ç–µ–∫—É—â–µ–π —Å—É–º–º—ã —à—Ç—Ä–∞—Ñ–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_name}.</b>")
					return
				else:
					# –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
					message_text = " ".join(args[2:])

					# –í—ã—á–∏—Ç–∞–µ–º —Å—É–º–º—É –∏–∑ —Ç–µ–∫—É—â–∏—Ö —à—Ç—Ä–∞—Ñ–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
					updated_fines = current_fines - int(amount)
					user_data[user_id]["fines"] = updated_fines
					save_user_data(user_data)

					# –í—ã—á–∏—Ç–∞–µ–º —Å—É–º–º—É ETH –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —á–∏—Å–ª–∞
					eth_to_rub_rate = get_eth_to_rub_rate()
					amount_in_eth = int(amount) / eth_to_rub_rate

					formatted_amount_in_eth = round(amount_in_eth, 3)

					# –û–±–Ω–æ–≤–ª—è–µ–º JSON —Ñ–∞–π–ª —Å ETH
					eth_wallet = get_eth_wallet()
					eth_wallet += formatted_amount_in_eth
					eth_data["wallet"]["eth"] = eth_wallet
					save_eth_data(eth_data)

					# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π fines —Å –ø—Ä–æ–±–µ–ª–∞–º–∏ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è —Ç—ã—Å—è—á
					message_updated_fines = int(updated_fines)
					message_amount = int(amount)
					
					formatted_amount = "{:,}".format(message_amount).replace(',', ' ')
					formatted_updated_fines = "{:,}".format(message_updated_fines).replace(',', ' ')

					# –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —à—Ç—Ä–∞—Ñ–µ
					await bot.send_message(user_id, f"üë©üèª‚Äçü¶∞üí¨ <b>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user_name}! –°—É–º–º–∞ –≤–∞—à–∏—Ö —à—Ç—Ä–∞—Ñ–æ–≤ –±—ã–ª–∞ —É–º–µ–Ω—å—à–µ–Ω–∞.</b>\n\n" \
													"<b>‚Ä¢ –ö—Ä–∞—Ç–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —à—Ç—Ä–∞—Ñ–∞—Ö:</b>\n" \
													f"<b>‚Ü≥ </b><b>–°—É–º–º–∞ —à—Ç—Ä–∞—Ñ–æ–≤ —É–º–µ–Ω—å—à–µ–Ω–∞ –Ω–∞ ‚Ä¢ üí∑ {formatted_amount} </b>‚ÇΩ\n" \
													f"<b>‚Ü≥ </b><b>–¢–µ–∫—É—â–∞—è —Å—É–º–º–∞ —à—Ç—Ä–∞—Ñ–æ–≤ ‚Ä¢ üí∑ {formatted_updated_fines} </b>‚ÇΩ\n\n" \
													f"üí¨ <b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏: {message_text}.</b>")
					
					await message.answer(f"üë©üèª‚Äçü¶∞üí¨ <b>–°—É–º–º–∞ —à—Ç—Ä–∞—Ñ–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_name} –æ–±–Ω–æ–≤–ª–µ–Ω–∞.</b>\n\n"
										"<b>‚Ä¢ –ö—Ä–∞—Ç–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —à—Ç—Ä–∞—Ñ–∞—Ö:</b>\n" \
										f"<b>‚Ü≥ </b><b>–°—É–º–º–∞ —à—Ç—Ä–∞—Ñ–æ–≤ —É–º–µ–Ω—å—à–µ–Ω–∞ –Ω–∞ ‚Ä¢ üí∑ {formatted_amount} </b>‚ÇΩ\n" \
										f"<b>‚Ü≥ </b><b>–¢–µ–∫—É—â–∞—è —Å—É–º–º–∞ —à—Ç—Ä–∞—Ñ–æ–≤ ‚Ä¢ üí∑ {formatted_updated_fines} </b>‚ÇΩ\n\n" \
										f"üí¨ <b>–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message_text}.</b>")
	else:
		await message.answer("üë©üèª‚Äçü¶∞üí¨ <b>–£ –≤–∞—Å –Ω–µ—Ç—É –ø—Ä–∞–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.</b>")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /add_eth
@dp.message_handler(commands=['add_eth'])
async def add_eth(message: types.Message):
	# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
	user_id = message.from_user.id
	admin_data = load_admin_data()

	if is_admin_in_data(user_id, admin_data):
		# –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã –Ω–∞ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
		args = message.get_args().split()

		if len(args) != 1:
			await message.answer("<b>üë©üèª‚Äçü¶∞üí¨ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É <code>/add_eth</code> [—Å—É–º–º–∞]</b>")
			return
		else:
			amount = args[0]

			# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –¥–∞–Ω–Ω—ã—Ö
			eth_data = load_eth_data()
		
			# –í—ã—á–∏—Ç–∞–µ–º —Å—É–º–º—É ETH –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —á–∏—Å–ª–∞
			eth_to_rub_rate = get_eth_to_rub_rate()
			amount_in_eth = int(amount) / eth_to_rub_rate

			message_eth_to_rub_rate = eth_to_rub_rate			

			formatted_amount_in_eth = round(amount_in_eth, 3)
			formatted_eth_to_rub_rate = "{:,}".format(message_eth_to_rub_rate).replace(',', ' ')

			# –û–±–Ω–æ–≤–ª—è–µ–º JSON —Ñ–∞–π–ª —Å ETH
			eth_wallet = get_eth_wallet()
			eth_wallet += formatted_amount_in_eth
			eth_data["wallet"]["eth"] = eth_wallet
			save_eth_data(eth_data)

			await message.answer(f"üë©üèª‚Äçü¶∞üí¨ <b>–°—É–º–º–∞ ETH –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ –∫—É—Ä—Å—É 1 ETH ~ {formatted_eth_to_rub_rate} </b>‚ÇΩ\n\n"
						 	 	"<b>‚Ä¢ –ö—Ä–∞—Ç–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ ETH:</b>\n" \
							 	f"<b>‚Ü≥ </b><b>–°—É–º–º–∞ ETH —É–≤–µ–ª–∏—á–µ–Ω–∞ –Ω–∞ ‚Ä¢ üí∑ {formatted_amount_in_eth} ETH</b>\n" \
							 	f"<b>‚Ü≥ </b><b>–¢–µ–∫—É—â–∞—è —Å—É–º–º–∞ ETH ‚Ä¢ üí∑ {eth_wallet} ETH</b>\n")

	else:
		await message.answer("üë©üèª‚Äçü¶∞üí¨ <b>–£ –≤–∞—Å –Ω–µ—Ç—É –ø—Ä–∞–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.</b>")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /aw_eth
@dp.message_handler(commands=['aw_eth'])
async def aw_eth(message: types.Message):
	# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
	user_id = message.from_user.id
	admin_data = load_admin_data()

	if is_admin_in_data(user_id, admin_data):
		# –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã –Ω–∞ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
		args = message.get_args().split()

		if len(args) != 1:
			await message.answer("<b>üë©üèª‚Äçü¶∞üí¨ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É <code>/aw_eth</code> [—Å—É–º–º–∞]</b>")
			return
		else:
			amount = args[0]

			# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –¥–∞–Ω–Ω—ã—Ö
			eth_data = load_eth_data()
		
			# –í—ã—á–∏—Ç–∞–µ–º —Å—É–º–º—É ETH –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —á–∏—Å–ª–∞
			eth_to_rub_rate = get_eth_to_rub_rate()
			amount_in_eth = int(amount) / eth_to_rub_rate

			message_eth_to_rub_rate = eth_to_rub_rate			

			formatted_amount_in_eth = round(amount_in_eth, 3)
			formatted_eth_to_rub_rate = "{:,}".format(message_eth_to_rub_rate).replace(',', ' ')

			# –û–±–Ω–æ–≤–ª—è–µ–º JSON —Ñ–∞–π–ª —Å ETH
			eth_wallet = get_eth_wallet()
			eth_wallet -= formatted_amount_in_eth
			eth_data["wallet"]["eth"] = eth_wallet
			save_eth_data(eth_data)

			await message.answer(f"üë©üèª‚Äçü¶∞üí¨ <b>–°—É–º–º–∞ ETH –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ –∫—É—Ä—Å—É 1 ETH ~ {formatted_eth_to_rub_rate} </b>‚ÇΩ\n\n"
						 	 	"<b>‚Ä¢ –ö—Ä–∞—Ç–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ ETH:</b>\n" \
							 	f"<b>‚Ü≥ </b><b>–°—É–º–º–∞ ETH —É–º–µ–Ω—å—à–µ–Ω–∞ –Ω–∞ ‚Ä¢ üí∑ {formatted_amount_in_eth} ETH</b>\n" \
							 	f"<b>‚Ü≥ </b><b>–¢–µ–∫—É—â–∞—è —Å—É–º–º–∞ ETH ‚Ä¢ üí∑ {eth_wallet} ETH</b>\n")

	else:
		await message.answer("üë©üèª‚Äçü¶∞üí¨ <b>–£ –≤–∞—Å –Ω–µ—Ç—É –ø—Ä–∞–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.</b>")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /add_int
@dp.message_handler(commands=['add_int'])
async def add_int(message: types.Message):
	# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
	user_id = message.from_user.id
	admin_data = load_admin_data()

	if is_admin_in_data(user_id, admin_data):
		# –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã –Ω–∞ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
		args = message.get_args().split()

		if len(args) != 2:
			await message.answer("<b>üë©üèª‚Äçü¶∞üí¨ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É <code>/add_int</code> [—Å—É–º–º–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –∏–≥–æ—Ä—è] [—Å—É–º–º–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –¥–∏–Ω–∞—Ä—ã]</b>")
			return
		else:
			amount_igor = args[0]
			amount_dinara = args[1]

			# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –¥–∞–Ω–Ω—ã—Ö
			eth_data = load_eth_data()
			eth_data["interest_wallet"]["interest_igor"] = int(amount_igor)
			eth_data["interest_wallet"]["interest_dinara"] = int(amount_dinara)
			save_eth_data(eth_data)

			await message.answer(f"<b>üë©üèª‚Äçü¶∞üí¨ –ü—Ä–æ—Ü–µ–Ω—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã ‚Ä¢ üßëüèª {amount_igor}% ~ {amount_dinara}% üë©üèª‚Äçü¶∞</b>")

	else:
		await message.answer("üë©üèª‚Äçü¶∞üí¨ <b>–£ –≤–∞—Å –Ω–µ—Ç—É –ø—Ä–∞–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.</b>")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /aw_fines
@dp.message_handler(commands=['aw_fines'])
async def aw_fines(message: types.Message):
	# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
	user_id = message.from_user.id
	admin_data = load_admin_data()

	if is_admin_in_data(user_id, admin_data):
		# –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã –Ω–∞ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
		args = message.get_args().split()
		
		if len(args) < 2:
			await message.answer("<b>üë©üèª‚Äçü¶∞üí¨ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É <code>/aw_fines</code> [user_id] [—Å—É–º–º–∞] [—Å–æ–æ–±—â–µ–Ω–∏–µ]</b>")
			return
		else:
			user_id = args[0]
			amount = args[1]
			
			# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –¥–∞–Ω–Ω—ã—Ö
			user_data = load_user_data()
			eth_data = load_eth_data()

			if user_id not in user_data:
				await message.answer(f"üë©üèª‚Äçü¶∞üí¨ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Ä¢ <code>{user_id}</code> –Ω–µ –Ω–∞–π–¥–µ–Ω.</b>")
				return
			else:
				# –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—É–º–º—É —à—Ç—Ä–∞—Ñ–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
				current_fines = int(user_data[user_id].get("fines", 0))

				# –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
				user = user_data[user_id]
				user_name = user.get("userlastname", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")

				# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–Ω–∏–º–∞–µ–º–∞—è —Å—É–º–º–∞ –Ω–µ –±–æ–ª—å—à–µ —Ç–µ–∫—É—â–µ–π —Å—É–º–º—ã —à—Ç—Ä–∞—Ñ–æ–≤
				if int(amount) > current_fines:
					await message.answer(f"üë©üèª‚Äçü¶∞üí¨ <b>–°—É–º–º–∞ –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è –±–æ–ª—å—à–µ —Ç–µ–∫—É—â–µ–π —Å—É–º–º—ã —à—Ç—Ä–∞—Ñ–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_name}.</b>")
					return
				else:
					# –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
					message_text = " ".join(args[2:])

					# –í—ã—á–∏—Ç–∞–µ–º —Å—É–º–º—É –∏–∑ —Ç–µ–∫—É—â–∏—Ö —à—Ç—Ä–∞—Ñ–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
					updated_fines = current_fines - int(amount)
					user_data[user_id]["fines"] = updated_fines
					save_user_data(user_data)

					# –í—ã—á–∏—Ç–∞–µ–º —Å—É–º–º—É ETH –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —á–∏—Å–ª–∞
					eth_to_rub_rate = get_eth_to_rub_rate()
					amount_in_eth = int(amount) / eth_to_rub_rate

					formatted_amount_in_eth = round(amount_in_eth, 3)

					# –û–±–Ω–æ–≤–ª—è–µ–º JSON —Ñ–∞–π–ª —Å ETH
					eth_wallet = get_eth_wallet()
					eth_wallet += formatted_amount_in_eth
					eth_data["wallet"]["eth"] = eth_wallet
					save_eth_data(eth_data)

					# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π fines —Å –ø—Ä–æ–±–µ–ª–∞–º–∏ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è —Ç—ã—Å—è—á
					message_updated_fines = int(updated_fines)
					message_amount = int(amount)
					
					formatted_amount = "{:,}".format(message_amount).replace(',', ' ')
					formatted_updated_fines = "{:,}".format(message_updated_fines).replace(',', ' ')

					# –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —à—Ç—Ä–∞—Ñ–µ
					await bot.send_message(user_id, f"üë©üèª‚Äçü¶∞üí¨ <b>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user_name}! –°—É–º–º–∞ –≤–∞—à–∏—Ö —à—Ç—Ä–∞—Ñ–æ–≤ –±—ã–ª–∞ —É–º–µ–Ω—å—à–µ–Ω–∞.</b>\n\n" \
													"<b>‚Ä¢ –ö—Ä–∞—Ç–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —à—Ç—Ä–∞—Ñ–∞—Ö:</b>\n" \
													f"<b>‚Ü≥ </b><b>–°—É–º–º–∞ —à—Ç—Ä–∞—Ñ–æ–≤ —É–º–µ–Ω—å—à–µ–Ω–∞ –Ω–∞ ‚Ä¢ üí∑ {formatted_amount} </b>‚ÇΩ\n" \
													f"<b>‚Ü≥ </b><b>–¢–µ–∫—É—â–∞—è —Å—É–º–º–∞ —à—Ç—Ä–∞—Ñ–æ–≤ ‚Ä¢ üí∑ {formatted_updated_fines} </b>‚ÇΩ\n\n" \
													f"üí¨ <b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏: {message_text}.</b>")
					
					await message.answer(f"üë©üèª‚Äçü¶∞üí¨ <b>–°—É–º–º–∞ —à—Ç—Ä–∞—Ñ–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_name} –æ–±–Ω–æ–≤–ª–µ–Ω–∞.</b>\n\n"
										"<b>‚Ä¢ –ö—Ä–∞—Ç–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —à—Ç—Ä–∞—Ñ–∞—Ö:</b>\n" \
										f"<b>‚Ü≥ </b><b>–°—É–º–º–∞ —à—Ç—Ä–∞—Ñ–æ–≤ —É–º–µ–Ω—å—à–µ–Ω–∞ –Ω–∞ ‚Ä¢ üí∑ {formatted_amount} </b>‚ÇΩ\n" \
										f"<b>‚Ü≥ </b><b>–¢–µ–∫—É—â–∞—è —Å—É–º–º–∞ —à—Ç—Ä–∞—Ñ–æ–≤ ‚Ä¢ üí∑ {formatted_updated_fines} </b>‚ÇΩ\n\n" \
										f"üí¨ <b>–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message_text}.</b>")
	else:
		await message.answer("üë©üèª‚Äçü¶∞üí¨ <b>–£ –≤–∞—Å –Ω–µ—Ç—É –ø—Ä–∞–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.</b>")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /add_eth
@dp.message_handler(commands=['add_eth'])
async def add_eth(message: types.Message):
	# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
	user_id = message.from_user.id
	admin_data = load_admin_data()

	if is_admin_in_data(user_id, admin_data):
		# –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã –Ω–∞ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
		args = message.get_args().split()

		if len(args) != 1:
			await message.answer("<b>üë©üèª‚Äçü¶∞üí¨ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É <code>/add_eth</code> [—Å—É–º–º–∞]</b>")
			return
		else:
			amount = args[0]

			# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –¥–∞–Ω–Ω—ã—Ö
			eth_data = load_eth_data()
		
			# –í—ã—á–∏—Ç–∞–µ–º —Å—É–º–º—É ETH –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —á–∏—Å–ª–∞
			eth_to_rub_rate = get_eth_to_rub_rate()
			amount_in_eth = int(amount) / eth_to_rub_rate

			message_eth_to_rub_rate = eth_to_rub_rate			

			formatted_amount_in_eth = round(amount_in_eth, 3)
			formatted_eth_to_rub_rate = "{:,}".format(message_eth_to_rub_rate).replace(',', ' ')

			# –û–±–Ω–æ–≤–ª—è–µ–º JSON —Ñ–∞–π–ª —Å ETH
			eth_wallet = get_eth_wallet()
			eth_wallet += formatted_amount_in_eth
			eth_data["wallet"]["eth"] = eth_wallet
			save_eth_data(eth_data)

			await message.answer(f"üë©üèª‚Äçü¶∞üí¨ <b>–°—É–º–º–∞ ETH –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ –∫—É—Ä—Å—É 1 ETH ~ {formatted_eth_to_rub_rate} </b>‚ÇΩ\n\n"
						 	 	"<b>‚Ä¢ –ö—Ä–∞—Ç–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ ETH:</b>\n" \
							 	f"<b>‚Ü≥ </b><b>–°—É–º–º–∞ ETH —É–≤–µ–ª–∏—á–µ–Ω–∞ –Ω–∞ ‚Ä¢ üí∑ {formatted_amount_in_eth} ETH</b>\n" \
							 	f"<b>‚Ü≥ </b><b>–¢–µ–∫—É—â–∞—è —Å—É–º–º–∞ ETH ‚Ä¢ üí∑ {eth_wallet} ETH</b>\n")

	else:
		await message.answer("üë©üèª‚Äçü¶∞üí¨ <b>–£ –≤–∞—Å –Ω–µ—Ç—É –ø—Ä–∞–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.</b>")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /add_fines
@dp.message_handler(commands=['add_fines_s'])
async def add_fines(message: types.Message):
	# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
	user_id = message.from_user.id
	admin_data = load_admin_data()

	if is_admin_in_data(user_id, admin_data):
		# –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã –Ω–∞ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
		args = message.get_args().split()
		
		if len(args) < 2:
			await message.answer("<b>üë©üèª‚Äçü¶∞üí¨ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É <code>/add_fines_s</code> [user_id] [—Å—É–º–º–∞] [—Å–æ–æ–±—â–µ–Ω–∏–µ]</b>")
			return
		else:
			user_id = args[0]
			amount = args[1]
			
			# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –¥–∞–Ω–Ω—ã—Ö
			user_data = load_user_data()
			if user_id not in user_data:
				await message.answer(f"üë©üèª‚Äçü¶∞üí¨ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Ä¢ <code>{user_id}</code> –Ω–µ –Ω–∞–π–¥–µ–Ω.</b>")
				return
			else:
				# –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
				message_text = " ".join(args[2:])

				# –ü—Ä–∏–±–∞–≤–ª—è–µ–º —Å—É–º–º—É –∫ —Ç–µ–∫—É—â–µ–º—É –∑–Ω–∞—á–µ–Ω–∏—é —à—Ç—Ä–∞—Ñ–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
				current_fines = int(user_data[user_id].get("fines_slava", 0))
				updated_fines = current_fines + int(amount)
				user_data[user_id]["fines_slava"] = updated_fines
				save_user_data(user_data)

				# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π fines —Å –ø—Ä–æ–±–µ–ª–∞–º–∏ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è —Ç—ã—Å—è—á
				message_amount = int(amount)
				message_updated_fines = int(updated_fines)

				formatted_amount = "{:,}".format(message_amount).replace(',', ' ')
				formatted_updated_fines = "{:,}".format(message_updated_fines).replace(',', ' ')

				# –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
				user = user_data[user_id]
				user_name = user.get("userlastname", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")

				# –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —à—Ç—Ä–∞—Ñ–µ
				await bot.send_message(user_id, f"üë©üèª‚Äçü¶∞üí¨ <b>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user_name}! –°—É–º–º–∞ –≤–∞—à–∏—Ö –¥–æ–ª–≥–æ–≤ –±—ã–ª–∞ —É–≤–µ–ª–∏—á–µ–Ω–∞.</b>\n\n" \
												"<b>‚Ä¢ –ö—Ä–∞—Ç–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ–ª–≥–∞—Ö:</b>\n" \
												f"<b>‚Ü≥ </b><b>–°—É–º–º–∞ –¥–æ–ª–≥–æ–≤ —É–≤–µ–ª–∏—á–µ–Ω–∞ –Ω–∞ ‚Ä¢ üí∑ {formatted_amount} </b>‚ÇΩ\n" \
												f"<b>‚Ü≥ </b><b>–¢–µ–∫—É—â–∞—è —Å—É–º–º–∞ –¥–æ–ª–≥–æ–≤ ‚Ä¢ üí∑ {formatted_updated_fines} </b>‚ÇΩ\n\n" \
												f"üí¨ <b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏: {message_text}.</b>")
				
				await message.answer(f"üë©üèª‚Äçü¶∞üí¨ <b>–°—É–º–º–∞ –¥–æ–ª–≥–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_name} –æ–±–Ω–æ–≤–ª–µ–Ω–∞.</b>\n\n"
									"<b>‚Ä¢ –ö—Ä–∞—Ç–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ–ª–≥–∞—Ö:</b>\n" \
									f"<b>‚Ü≥ </b><b>–°—É–º–º–∞ –¥–æ–ª–≥–æ–≤ —É–≤–µ–ª–∏—á–µ–Ω–∞ –Ω–∞ ‚Ä¢ üí∑ {formatted_amount} </b>‚ÇΩ\n" \
									f"<b>‚Ü≥ </b><b>–¢–µ–∫—É—â–∞—è –¥–æ–ª–≥–æ–≤ —à—Ç—Ä–∞—Ñ–æ–≤ ‚Ä¢ üí∑ {formatted_updated_fines} </b>‚ÇΩ\n\n" \
									f"üí¨ <b>–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message_text}.</b>")
	else:
		await message.answer("üë©üèª‚Äçü¶∞üí¨ <b>–£ –≤–∞—Å –Ω–µ—Ç—É –ø—Ä–∞–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.</b>")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /aw_fines
@dp.message_handler(commands=['aw_fines_s'])
async def aw_fines(message: types.Message):
	# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
	user_id = message.from_user.id
	admin_data = load_admin_data()

	if is_admin_in_data(user_id, admin_data):
		# –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã –Ω–∞ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
		args = message.get_args().split()
		
		if len(args) < 2:
			await message.answer("<b>üë©üèª‚Äçü¶∞üí¨ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É <code>/aw_fines_s</code> [user_id] [—Å—É–º–º–∞] [—Å–æ–æ–±—â–µ–Ω–∏–µ]</b>")
			return
		else:
			user_id = args[0]
			amount = args[1]
			
			# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –¥–∞–Ω–Ω—ã—Ö
			user_data = load_user_data()

			if user_id not in user_data:
				await message.answer(f"üë©üèª‚Äçü¶∞üí¨ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Ä¢ <code>{user_id}</code> –Ω–µ –Ω–∞–π–¥–µ–Ω.</b>")
				return
			else:
				# –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—É–º–º—É —à—Ç—Ä–∞—Ñ–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
				current_fines = int(user_data[user_id].get("fines_slava", 0))

				# –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
				user = user_data[user_id]
				user_name = user.get("userlastname", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")

				# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–Ω–∏–º–∞–µ–º–∞—è —Å—É–º–º–∞ –Ω–µ –±–æ–ª—å—à–µ —Ç–µ–∫—É—â–µ–π —Å—É–º–º—ã —à—Ç—Ä–∞—Ñ–æ–≤
				if int(amount) > current_fines:
					await message.answer(f"üë©üèª‚Äçü¶∞üí¨ <b>–°—É–º–º–∞ –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è –±–æ–ª—å—à–µ —Ç–µ–∫—É—â–µ–π —Å—É–º–º—ã —à—Ç—Ä–∞—Ñ–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_name}.</b>")
					return
				else:
					# –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
					message_text = " ".join(args[2:])

					# –í—ã—á–∏—Ç–∞–µ–º —Å—É–º–º—É –∏–∑ —Ç–µ–∫—É—â–∏—Ö —à—Ç—Ä–∞—Ñ–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
					updated_fines = current_fines - int(amount)
					user_data[user_id]["fines_slava"] = updated_fines
					save_user_data(user_data)

					# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π fines —Å –ø—Ä–æ–±–µ–ª–∞–º–∏ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è —Ç—ã—Å—è—á
					message_updated_fines = int(updated_fines)
					message_amount = int(amount)
					
					formatted_amount = "{:,}".format(message_amount).replace(',', ' ')
					formatted_updated_fines = "{:,}".format(message_updated_fines).replace(',', ' ')

					# –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —à—Ç—Ä–∞—Ñ–µ
					await bot.send_message(user_id, f"üë©üèª‚Äçü¶∞üí¨ <b>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user_name}! –°—É–º–º–∞ –≤–∞—à–∏—Ö –¥–æ–ª–≥–æ–≤ –±—ã–ª–∞ —É–º–µ–Ω—å—à–µ–Ω–∞.</b>\n\n" \
													"<b>‚Ä¢ –ö—Ä–∞—Ç–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ–ª–≥–∞—Ö:</b>\n" \
													f"<b>‚Ü≥ </b><b>–°—É–º–º–∞ –¥–æ–ª–≥–æ–≤ —É–º–µ–Ω—å—à–µ–Ω–∞ –Ω–∞ ‚Ä¢ üí∑ {formatted_amount} </b>‚ÇΩ\n" \
													f"<b>‚Ü≥ </b><b>–¢–µ–∫—É—â–∞—è —Å—É–º–º–∞ –¥–æ–ª–≥–æ–≤ ‚Ä¢ üí∑ {formatted_updated_fines} </b>‚ÇΩ\n\n" \
													f"üí¨ <b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏: {message_text}.</b>")
					
					await message.answer(f"üë©üèª‚Äçü¶∞üí¨ <b>–°—É–º–º–∞ –¥–æ–ª–≥–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_name} –æ–±–Ω–æ–≤–ª–µ–Ω–∞.</b>\n\n"
										"<b>‚Ä¢ –ö—Ä–∞—Ç–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ–ª–≥–∞—Ö:</b>\n" \
										f"<b>‚Ü≥ </b><b>–°—É–º–º–∞ –¥–æ–ª–≥–æ–≤ —É–º–µ–Ω—å—à–µ–Ω–∞ –Ω–∞ ‚Ä¢ üí∑ {formatted_amount} </b>‚ÇΩ\n" \
										f"<b>‚Ü≥ </b><b>–¢–µ–∫—É—â–∞—è —Å—É–º–º–∞ –¥–æ–ª–≥–æ–≤ ‚Ä¢ üí∑ {formatted_updated_fines} </b>‚ÇΩ\n\n" \
										f"üí¨ <b>–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message_text}.</b>")
	else:
		await message.answer("üë©üèª‚Äçü¶∞üí¨ <b>–£ –≤–∞—Å –Ω–µ—Ç—É –ø—Ä–∞–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.</b>")